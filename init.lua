-- example file i.e lua/custom/init.lua

vim.g.mapleader = ','
local o = vim.o
local g = vim.g
local opts = { noremap = true, silent = true}

g.mapleader = ','

--===================================================================
--= Settings: Highlights
--=    These highlight commands had to be put here, or they got overwritten.
--= ===================================================================
vim.cmd [[
    " Don't let the colorschemes change the background color:
    highlight Visual cterm=NONE ctermbg=236 ctermfg=NONE guibg=Grey40

    " Highlight merge conflict markers
    match Todo '\v^(\<|\=|\>){7}([^=].+)?$'

    augroup ilikecursorline
        " Color notifications
        autocmd VimEnter * highlight NotifyGreen  gui=bold guifg=#8dfa81 cterm=bold ctermfg=119
        autocmd VimEnter * highlight NotifyRed    gui=bold guifg=#e47574 cterm=bold ctermfg=167
        autocmd VimEnter * highlight NotifyYellow gui=bold guifg=#fffb87 cterm=bold ctermfg=227


        " Better diff colors.
        " highlight DiffAdd    cterm=none ctermfg=bg ctermbg=Green   gui=none guifg=bg guibg=Green
        " highlight DiffDelete cterm=none ctermfg=bg ctermbg=Red     gui=none guifg=
        " highlight DiffChange cterm=none ctermfg=bg ctermbg=Yellow  gui=none
        " highlight DiffText   cterm=none ctermfg=bg ctermbg=Magenta gui=none

        ""----------------------------------------------------------------------------------------------
        "" PLUGIN SETTINGS: Diff Highlighting (which the Git plugins use
        ""----------------------------------------------------------------------------------------------
        autocmd VimEnter * highlight SignColumn  guibg=#0b304e
        autocmd VimEnter * highlight DiffAdd     gui=bold guifg=LightGreen   guibg=#0b304e cterm=bold ctermfg=10
        autocmd VimEnter * highlight DiffChange  gui=bold guifg=LightYellow  guibg=#0b304e cterm=bold ctermfg=14
        autocmd VimEnter * highlight DiffRemove  gui=bold guifg=LightRed     guibg=#0b304e cterm=bold ctermfg=12
        autocmd VimEnter * highlight DiffText    gui=bold guifg=LightMagenta guibg=#0b304e cterm=bold ctermfg=13
        " autocmd ColorScheme * highlight DiffAdd     gui=bold guifg==#2b506e guibg=#000000  ctermfg=2 ctermbg=0
        "highlight GitGutterAdd      guifg=red ctermfg=9


        "---------------------------------------------------
        " Cursor Line
        "---------------------------------------------------
        " highlight clear cursorline
        " augroup CLClear
        "     set cursorline
        " augroup End

        " augroup CLNRSet
        "     set cursorline
        " augroup END
        set cursorline
        set cursorlineopt=line,number
        autocmd VimEnter * :highlight CursorLine guibg=#282a2e


        "---------------------------------------------------
        " Cursor Column
        "---------------------------------------------------
        " Highlight the cursor column
        " Highlight the cursor column
        set cursorcolumn
        " highlight CursorColumn ctermfg=White ctermbg=Yellow cterm=bold guifg=white guibg=yellow gui=bold
        "highlight CursorColumn ctermfg=Black ctermbg=Yellow cterm=bold guifg=Black guibg=yellow gui=NONE

        "---------------------------------------------------
        " Line Number
        "---------------------------------------------------
        autocmd VimEnter * highlight LineNr       ctermfg=240 ctermbg=0 guifg=#2b506e guibg=#000000
        autocmd VimEnter * highlight link         LineNrAbove  LineNr
        autocmd VimEnter * highlight link         LineNrBelow  LineNr
        autocmd VimEnter * highlight CursorLineNr cterm=underline ctermfg=11 gui=bold guifg=Yellow


        "---------------------------------------------------
        " SETTINGS: Matching
        "---------------------------------------------------
        " Settings: MATCHING
        " Syntax: hi MatchParen cterm=STYLE ctermbg=BGCOL ctermfg=FGCOL
        " Styles: bold underline none
        autocmd VimEnter * hi MatchParen cterm=NONE,bold ctermfg=green ctermbg=red       ""Intensify matching parenthesis
    augroup END
]]



--===================================================================
--= Basic settings that need to be done early.
--= ===================================================================
o.compatible = false     -- Eliminate vi backwards-compatability
o.number = true              -- Enable line numbers
o.numberwidth = 4
-- g.filetype plugin on          -- required!
-- g.filetype indent on          -- required!
o.syntax = true
--"
--" Abbreviations (typo corrections)
--"
vim.cmd('cnoreabbrev WQ wq')
vim.cmd('cnoreabbrev Wq wq')
vim.cmd('cnoreabbrev We w')
vim.cmd('cnoreabbrev W  w')
vim.cmd('cnoreabbrev Q  q')
vim.cmd('cnoreabbrev X  x')
--" TODO: This needs to get remapped, or utilisnipped out.
--" This generated by something that I hit with the keyboard, and it
--" causes a previous selected item to get replaced by 'w'.
--"%s/\<2\>/w/g" something



-- vim.cmd(o.map("n", ";", ':%s/<c-r><c-w>//g<left><left>', opts)

-- o.map("n", "<C-a>", '<C-U><C-R>=v:count1<CR>Cycle<CR>', opts)

-- This mapping allows us to press <enter> to search for the current
-- token under the cursor without stepping to the next match (like # or *)
-- and set the highlight.
-- The second incantation does the same thing, except it does not do a word search.
-- Fix the one below for FreeBSD
-- ['<CR>'] = {"<cmd>:let @/='\<<C-R>=expand('<cword>')<CR>\>'<CR>:set hls<CR>", "CR - Search"},
-- ['<CR>'] = {"<cmd> :let @ /= '<C-R>=expand(<cword>)<CR>' ", "CR - Search"},
-- ['<CR>'] = {"<cmd> :let @ /= '<C-R>=expand(<cword>)<CR>'<CR>:set hls<CR>", "CR - Search"},
--:nnoremap <silent><CR>  :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls
-- ['F10']= {"<cmd>:let @/='<C-R>=expand('<cword>')<CR>'<CR>:set hls<CR>", "CR - Search"},
-- ['F10']= {"<cmd> :let @/ = '<C-R>=expand(<cword>)<CR>'<CR>:set hls<CR>", "CR - Search"},
--o.map("n", "<CR>", :let @ = '<C-R>=expand(<cword>)<CR>:set hls<CR>', opts)
-- :noremap <silent><cr>  :let @ /= '<C-R>=expand(<cword>)<CR>'
--o.map("n", "<F10>", :let @/= /<<C-R>="test"<CR>/> ', opts)


vim.cmd[[
"--------------------------------------------------------------------
" Settings: SEARCH
"--------------------------------------------------------------------
set hlsearch        " Highlight search
set ignorecase      " Ignore case when searching.
set incsearch       " Incremental search
set nowrapscan      " does not wrap back to the beginning for search.
set smartcase       " Searches ignoring case unless an uppercase is pressed.


" Shortcuts: search/replace
" A function is for replacing the current-under-cursor word with
" another pattern/word. Simply, it copies the word under cursor and inserts it
" into a substitution command call. You only need to type the replacement pattern
" and press the Enter key to actually replace the text:
" replace the word under cursor
" Select 's' to search/replace
" nmap ; :%s/\<<c-r><c-w>\>/
" noremap ;       :%s/\<<c-r><c-w>\>//g<left><left>
"nmap ; :%s/\<<c-r><c-w>\>//g<left><left>
" noremap ;       :%s/<<c-r><c-w>>//g<left><left>
noremap <silent>; :/%s\/<c-r><c-w\/\/g<left><left>

" Shortcuts: Substitute
" Setup command to replace current word with last yanked, cut, etc. word.
" Select "S" to replace
nnoremap <silent>S :let @x=@"<CR>"_diw"xP

" This mapping allows us to press <enter> to search for the current
" token under the cursor without stepping to the next match (like # or *)
" and set the highlight.
" The second incantation does the same thing, except it does not do a word search.
" Fix the one below for FreeBSD
" :nnoremap <silent><CR>  :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>
":nnoremap <silent><CR>  :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls
noremap <CR>    :let @/=expand('<cword>')<CR>:set hls<CR>


vnoremap <silent> Q gq              " Disable Ex mode and use Q for formatting the current paragraph (or selection)
nnoremap <silent> Q gqap
vnoremap <silent> < <gv             " Remain in visual mode after '<' or '>'
vnoremap <silent> > >gv


nnoremap <silent> n  nzz
nnoremap <silent> N  Nzz
nnoremap <silent> *  nzz
nnoremap <silent> #  #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" Make * and # work with visual selection
vnoremap <silent> * yq/i\V<Esc>p<CR>
vnoremap <silent> # yq?i\V<Esc>p<CR>

" Repeat last action for each line in the visual selection
vnoremap <silent> . :normal .<CR>

" Make ' jump to saved line & column rather than just line
nnoremap ' `


]]


--" Shortcuts: search/replace
--" A function is for replacing the current-under-cursor word with
--" another pattern/word. Simply, it copies the word under cursor and inserts it
--" into a substitution command call. You only need to type the replacement pattern
--" and press the Enter key to actually replace the text:
--" replace the word under cursor
--" Select 's' to search/replace
--" nmap ; :%s/\<<c-r><c-w>\>/



vim.api.nvim_exec([[ autocmd FileType go setlocal shiftwidth=8 softtabstop=8 expandtab ]], false)
vim.api.nvim_exec([[ autocmd TermOpen * setlocal nonumber norelativenumber ]], false)
vim.api.nvim_exec([[ let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""']], false)
vim.api.nvim_exec([[ set clipboard+=unnamedplus ]], false)
vim.api.nvim_exec([[ set inccommand=nosplit ]], false)
vim.cmd([[ autocmd FileType ruby,elixir,go,rust,clojure autocmd BufWritePre <buffer> %s/\s\+$//e ]])
